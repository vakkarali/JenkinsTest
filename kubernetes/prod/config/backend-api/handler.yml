# Handler middleware chain configuration
---
enabled: true
basePath: ${handler.basePath}

#------------------------------------------------------------------------------
# Support individual handler chains for each separate endpoint. It allows framework
# handlers like health check, server info to bypass majority of the middleware handlers
# and allows mixing multiple frameworks like OpenAPI and GraphQL in the same instance.
#
# handlers  --  list of handlers to be used across chains in this microservice
#               including the routing handlers for ALL endpoints
#           --  format: fully qualified handler class name@optional:given name
# chains    --  allows forming of [1..N] chains, which could be wholly or
#               used to form handler chains for each endpoint
#               ex.: default chain below, reused partially across multiple endpoints
# paths     --  list all the paths to be used for routing within the microservice
#           ----  path: the URI for the endpoint (ex.: path: '/v1/pets')
#           ----  method: the operation in use (ex.: 'post')
#           ----  exec: handlers to be executed -- this element forms the list and
#                       the order of execution for the handlers
#
# IMPORTANT NOTES:
# - to avoid executing a handler, it has to be removed/commented out in the chain
#   or change the enabled:boolean to false for a middleware handler configuration.
# - all handlers, routing handler included, are to be listed in the execution chain
# - for consistency, give a name to each handler; it is easier to refer to a name
#   vs a fully qualified class name and is more elegant
# - you can list in chains the fully qualified handler class names, and avoid using the
#   handlers element altogether
#------------------------------------------------------------------------------
handlers:
  # Light-framework cross-cutting concerns implemented in the microservice
  - com.networknt.exception.ExceptionHandler@exception
  # - com.networknt.metrics.MetricsHandler@metrics
  - com.networknt.traceability.TraceabilityHandler@traceability
  - com.networknt.correlation.CorrelationHandler@correlation
  #Cors handler to handler post/put pre-flight
  # - com.networknt.cors.CorsHttpHandler@cors
  - com.networknt.openapi.OpenApiHandler@specification
  - com.networknt.openapi.JwtVerifyHandler@security
  - com.networknt.body.ProxyBodyHandler@body
  - com.networknt.audit.AuditHandler@audit
  - com.networknt.sanitizer.SanitizerHandler@sanitizer
  - com.networknt.openapi.ValidatorHandler@validator
  - com.networknt.limit.LimitHandler@limit
  # Header middleware to manipulate request and/or response headers before or after downstream server
  - com.networknt.header.HeaderHandler@header
  # Direct requests to named services based on the request path
  # - com.networknt.router.middleware.PathPrefixServiceHandler@path
  # - ca.sunlife.eadp.proxy.LightProxyHandler@proxy
  
  - ca.sunlife.eadp.proxy.EadpProxyHandler@proxy
  
  # - com.networknt.resource.VirtualHostHandler@virtual
  # Customer business domain specific cross-cutting concerns handlers
  # - com.example.validator.CustomizedValidator@custvalidator
  # Framework endpoint handlers
  - com.networknt.health.HealthGetHandler@health
  - com.networknt.info.ServerInfoGetHandler@info
  # - com.networknt.metrics.prometheus.PrometheusGetHandler@getprometheus
  # Chaos Monkey middleware handlers and API handler
  - com.networknt.chaos.KillappAssaultHandler@killapp
  - com.networknt.chaos.LatencyAssaultHandler@latency
  - com.networknt.chaos.MemoryAssaultHandler@memory
  - com.networknt.chaos.ExceptionAssaultHandler@exchaos
  - com.networknt.chaos.ChaosMonkeyGetHandler@chaosget
  - com.networknt.chaos.ChaosMonkeyPostHandler@chaospost
  # - ca.sunlife.eadp.proxy.ProxyServerInfoHandler@proxyServerInfo
  
  - ca.sunlife.eadp.proxy.EadpProxyServerInfoHandler@proxyServerInfo
  
  - com.networknt.specification.SpecDisplayHandler@spec
  - com.networknt.specification.SpecSwaggerUIHandler@swaggerui
  # - com.networknt.metrics.prometheus.PrometheusGetHandler@getprometheus
  # Business Handlers


chains:
  default:
    - exception
    - sanitizer
    - traceability
    - limit
    - correlation  
    - audit
    - header
    - specification
    - security
    - body
    - validator
    - proxy

  admin:
    - exception
    # - metrics
    - traceability
    - correlation
    - audit
    - header
    - specification
    - security
    #- body
    - validator

  proxy-no-security:
    - exception
    - correlation
    - traceability
    - audit
#    - specification
    - proxy

paths:
  - path: '/*'
    method: 'GET'
    exec:
      - default
  - path: '/*'
    method: 'POST'
    exec:
      - default
  - path: '/*'
    method: 'PUT'
    exec:
      - default
  - path: '/*'
    method: 'DELETE'
    exec:
      - default
  - path: '/*'
    method: 'PATCH'
    exec:
      - default

  - path: '/server/info'
    method: 'get'
    exec:
#      enable security
      - admin
      - proxyServerInfo
      
#   the health endpoint for the proxy itself, this for both liveness and readiness
  - path: '/health'
    method: 'get'
    exec:
      - health

  - path: '/chaosmonkey'
    method: 'get'
    exec:
      # enable security once we have this endpoint in the spec with a proper scope.
      - admin
      - chaosget

  - path: '/chaosmonkey/{assault}'
    method: 'post'
    exec:
      # enable security once we have this endpoint in the spec with a proper scope.
      - admin
      - chaospost

  - path: '/spec.yaml'
    method: 'get'
    exec:
      - spec

  - path: '/specui.html'
    method: 'get'
    exec:
      - swaggerui
      
  - path: '/health/liveness/*'
    method: 'GET'
    exec:
      - proxy-no-security

  - path: '/health/readiness/*'
    method: 'GET'
    exec:
      - proxy-no-security